import com.rameses.annotations.*;
import java.text.SimpleDateFormat;

class SummaryOfCollectionReportService {


	@Env
	def env;

	@ActiveDB("summary_of_collection")
	def em;

	@ActiveDB("loanapp")
	def loanapp;

	@Service("DateService")
	def dateSvc;

	@Service("BranchService")
	def branchSvc;

	private def DATE_FORMAT1 = new SimpleDateFormat("MMM-dd-yyyy");
	private def DATE_FORMAT2 = new SimpleDateFormat("MMM-dd-yyyy hh:mm:ss a");

	private void validate( params ) {
		def sd = parseDate(params.startdate);
		def ed = parseDate(params.enddate);

		if (sd.compareTo(ed) > 0) {
			throw new Exception("From date must not be greater than To date.");
		}
	}

	@ProxyMethod
	public def getReportData() {
		def params = [startdate: "2016-11-04", enddate: "2016-11-04"];
		return getReportData(params);
	}

	@ProxyMethod
	public def getReportData( params ) {
		if (!params.startdate) throw new Exception("Please specify From date.");
		if (!params.enddate) throw new Exception("Please specify To date.");
		validate(params);

		def sd = parseDate(params.startdate);
		def ed = parseDate(params.enddate);

		def cal = Calendar.getInstance();

		def list = [];
		def dates = em.getPaymentDates([startdate: sd, enddate: ed]);
		if (!dates) {
			throw new RuntimeException("No Summary of Collection from " + sd + " to " + ed + ".");
		}

		dates?.each{ o->
			def items = em.getLedgersWithPaymentsByDate([date: o.date]);
			items?.each{ i->
				def xlist = [];
				def details = em.getLedgerDetailByDate([objid: i.objid, date: o.date]);
				details?.each{ d->
					def itm = [
						interest: (d.interestpaid != 0)? d.interestpaid : 0.00,
						penalty : d.penaltypaid
					];

					if (d.state == "RECEIVED") {
					} else if (d.state == 'PROCEED' || d.state == 'ADJUSTMENT') {
					} else if (d.state == 'PREPAIDINTEREST') {
						itm.penalty = 0.00;
					} else {	
					}

					xlist << itm;
				}
				def rev = em.getRevenueByDateAndTag([objid: i.objid, date: o.date, tag: "interest"]);

				def interest = 0.00;
				if (rev) {
					interest = rev.amount.sum();
					if (!interest) interest = 0.00;
				}

				rev = em.getRevenueByDateAndTag([objid: i.objid, date: o.date, tag: "penalty"]);

				def penalty = 0.00;;
				if (rev) {
					penalty = rev.amount.sum();
					if (!penalty) penalty = 0.00;
				}
				xlist << [interest: interest, penalty: penalty];

				interest = xlist?.interest.sum();
				if (!interest) interest = 0.00;

				penalty = xlist?.penalty.sum();
				if (!penalty) penalty = 0.00;


				def principal = i.amount - interest - penalty;
				if (!principal || principal < 0) principal = 0.00;

				i.interest = interest;
				i.penalty = penalty;
				i.principal = principal;
				//println 'total interest ' + interest + ' total penalty ' + penalty + ' payment ' + i;
			}
			list.addAll(items);
		}

		def serverdate = dateSvc.serverDate;
		def branch = branchSvc.open([:]);
		def data = [
			date_period : DATE_FORMAT1.format(sd) + " TO " + DATE_FORMAT1.format(ed),//startdate + " TO " + enddate,
			dtprinted	: DATE_FORMAT2.format(serverdate),
			printedby 	: env.NAME,
			items		: list
		];
		branch.each{ k, v->
			data["branch_"+k] = v;
		}

		return data;
	}

	private def parseDate( date ) {
		if (!date) return null;

		if (date instanceof Date) {
			return date;
		} else {
			return java.sql.Date.valueOf(date);
		}
	}
}