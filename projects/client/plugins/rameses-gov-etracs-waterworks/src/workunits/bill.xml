<workunits>
    <invokers>
        <invoker xfolderid="/home/waterworks" caption="Bill Generator" action="init" index="2"/>
        <invoker type="formActions" caption="Close" action="_close" immediate="true" visibleWhen="#{generated == false}"/>
        <invoker type="formActions" caption="Cancel" action="cancel" visibleWhen="#{generated == true}"/>
        <invoker type="formActions" caption="Generate" action="generate" visibleWhen="#{generated == false}"/>
        <invoker type="formActions" caption="Preview" action="preview" visibleWhen="#{generated == true}"/>
        <invoker type="formActions" caption="Back" action="back" visibleWhen="#{generated == null}"/>
    </invokers>
    
    <code>
        <![CDATA[
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.common.*
        import com.rameses.osiris2.reports.*;
        import java.rmi.server.UID;
        import java.math.BigDecimal;
        
        class BillGenerationController{
        
            @Binding
            def binding;
            
            @Service('DateService')
            def dateSvc;
            
            @Service('WaterworksRouteService')
            def routeSvc;
            
            @Service('WaterworksAccountService')
            def accountSvc;
            
            @Service('WaterworksMeterReadingService')
            def readingSvc;
            
            @Service('ReportParameterService')
            def paramSvc;
        
            def entity;
            def title = 'Bill Generator';
            def printbyoptions;
            def routes;
            def bills;
            def params;
            def generated = false;
            def reportPath = "com/rameses/gov/etracs/waterworks/report/";
            
            void init(){
                entity = [:];
                bills = [];
                printbyoptions = ["Accounts","Routes"];
                entity.month = dateSvc.getServerMonth();
                entity.year = dateSvc.getServerYear();
                routes = routeSvc.getList(['objid':'%']);
                def months = dateSvc.getMonths();
                months.each{
                    if(entity.month == it.index) entity.billingmonth = it.caption+'-'+entity.year;
                }
            }
            
            void generate(){
                entity.routeid = entity.route ? entity.route.objid : '%';
                bills = accountSvc.getBill(entity);
                bills.each{
                    it._bar = readingSvc.getConsumptionTable(5,it.acctid).reverse();
                    it._computation = [
                        ['month':'FEB', 'amount': new BigDecimal(150.25), 'interest': new BigDecimal(8.25), 'surcharge': new BigDecimal(18.25), 'balance': new BigDecimal(230.75)],
                        ['month':'MAR', 'amount': new BigDecimal(110.25), 'interest': new BigDecimal(16.25), 'surcharge': new BigDecimal(21.25), 'balance': new BigDecimal(324.25)]
                    ];
                }
                accountHandler.reload();
                generated = true;
                if(entity.printby == 'Accounts'){
                    int size = bills.size();
                    if(size <= 0) entity.summary = 'No records found!';
                    if(size == 1) entity.summary = 'There is 1 record to be generated.';
                    if(size > 1) entity.summary = 'There are '+size+' records to be generated.';
                }
                if(entity.printby == 'Routes'){
                    int size = bills.size();
                    if(size <= 0) entity.summary = 'No records found for '+entity.route.name+'.';
                    if(size == 1) entity.summary = 'There is 1 record to be generated for the route '+entity.route.name+'.';
                    if(size > 1) entity.summary = 'There are '+size+' records to be generated for the route '+entity.route.name+'.';
                }
                binding.refresh("entity.*");
            }
            
            void cancel(){
                generated = false;
            }
            
            def back(){
                generated = true;
                return 'default';
            }
            
            def preview(){
                params = paramSvc.getStandardParameter();
                params.billingmonth = entity.billingmonth;
                params.duedate = entity.duedate;
                params.cuttingdate = entity.cuttingdate;
                report.viewReport();
                generated = null;
                return 'preview';
            }
            
            @PropertyChangeListener
            def listener = [
                "entity.printby" : {o ->
                    bills = [];
                    accountHandler.reload();
                    entity.route = null;
                    binding.refresh("entity.*");
                }
            ];
            
            @PropertyChangeListener
            def listener2 = [
                "entity.route" : {o ->
                    bills = [];
                    accountHandler.reload();
                    binding.refresh("entity.*");
                }
            ];
            
            def account;
            def accountHandler = [
                fetchList : {
                    return bills;
                }
            ] as BasicListModel;  
            
            SubReport[] getSubReports(){
                return [ 
                    new SubReport("bar", reportPath+"bargraph.jasper"),
                    new SubReport("computation", reportPath+"computation.jasper")
                ] as SubReport[]; 
            }
            
            def report = [
                getReportName : { return reportPath+'bill.jasper' },
                getReportData : { return bills },
                getSubReports : { return getSubReports() },
                getParameters : { return params }
            ] as ReportModel;
        
        }
        ]]>
    </code>
    
    <pages>
        <page template="com.rameses.gov.etracs.waterworks.bill.BillGenerationPage"/>
        <page name="preview" template="com.rameses.osiris2.common.ui.ReportPreviewPage"/>
    </pages>
</workunits>