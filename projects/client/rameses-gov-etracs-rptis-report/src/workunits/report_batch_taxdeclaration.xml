<workunit >
    <invokers>
        <invoker folderid="/explorer/report/rpt" action="init" caption="Tax Declaration Batch Printing" target="window" index="602" 
            role="ASSESSOR_REPORT,REPORT" />
        
        <invoker type="formActions" action="_close" caption="Close" mnemonic="c" icon="images/toolbars/cancel.png" immediate="true" visibleWhen="#{mode == 'init'}"/>
        <invoker type="formActions" action="print" caption="Print" mnemonic="p" shortcut="ctrl + P" icon="images/toolbars/print.png" visibleWhen="#{mode == 'init'}"/>
        <invoker type="formActions" action="cancelPrinting" caption="Cancel Printing" icon="images/toolbars/cancel.png" mnemonic="a" shortcut="ctrl + a" visibleWhen="#{mode == 'printing'}" />
    </invokers>
    <code >
    <![CDATA[
       import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*;
        import com.rameses.rcp.framework.TaskManager;
        import com.rameses.etracs.shared.*;

        class TaxDecBatchReportController
        {
            @Binding
            def binding

            @Service("ReportParameterService")
            def svcParams

            @Service("TDReportService")
            def svc

            @Service('LGUService')
            def lguSvc
            
            @Service('Var')
            def var 
            
            @Service('FAASListService')
            def faasListSvc
            
            def title='Tax Declaration Batch Printing'

            def params;
            def lgu;
            def barangays;
            def states;
            
            def msg 
            def mode 
            def faasTask;
            
            public void init() {
                params = [:]
                params.revisionyear = var.get('current_ry');
                params.state = 'CURRENT';
                params.printinterval = 2;
                barangays = lguSvc.getBarangaysByParentId(null);
                states = faasListSvc.getStates();
                mode='init';
            }
            
            def updateMessage = { msg ->
                this.msg = msg
                binding.refresh('msg')
            }

            def onFinish = { msg -> 
                this.msg = msg
                this.mode = 'init';
                binding.refresh();
            }

            def onError = { err ->
                mode = 'init';
                msg = err;
                binding.refresh();
            }

            def cancelPrinting() {
                faasTask.interrupt = true;
                this.mode = 'init'
                msg = 'Printing of faas has been cancelled.  '
                binding.refresh();
            }

            public void print() {
                mode = 'printing';
                faasTask = new FaasBatchTask([
                        updateMessage:updateMessage,
                        onError: onError,
                        onFinish: onFinish, 
                        interrupt: false, 
                        svcParams: svcParams,
                        svc: svc, 
                        params : params
                     ]);
                Thread t = new Thread( faasTask);
                t.start();
            }

        }

        class FaasBatchTask implements Runnable {

            def svcParams
            def svc;

            def reportdata;
            def params;

            def updateMessage;
            def onError;
            def onFinish;
            boolean interrupt; 
            
            def reportPath = 'com/rameses/gov/etracs/rpt/report/td/'

            public void run() {
                def list = null;
                try {
                    list = svc.getFaasIds(params) 
                }
                catch(e){
                    onError(e.message);
                    return;
                }
                
                if( !list){
                    onError('No records found.');
                    return;
                }
                
                try { 
                    while(!interrupt && !list.isEmpty() ) {
                        def o = list.remove(0);
                        reportdata = svc.buildTaxDec( o.objid )

                        report.viewReport()
                        ReportUtil.print( report.report, false) ;

                        updateMessage("Processing TD No. ${o.tdno} "  );
                        Thread.sleep(params.printinterval * 1000)
                    }    
                    def msg = "Batch printing of Tax Declaration has been successfully completed." 
                    if(interrupt) 
                        msg = 'Tax Declaration printing has been interrupted.    '
                    onFinish(msg );
               } catch(e) {
                    onError( e );
               }
            }
            
            
            def report = [
                getReportName : { return reportPath + 'tdreport.jasper'},
                getSubReports : { 
                    return [
                        new SubReport( 'TDReportLand',  reportPath + 'tdreportland.jasper'),
                        new SubReport( 'TDReportBldg',  reportPath + 'tdreportbldg.jasper'),
                        new SubReport( 'TDReportMach',  reportPath + 'tdreportimprovement.jasper'),
                        new SubReport( 'TDReportPlant', reportPath + 'tdreportimprovement.jasper'),
                        new SubReport( 'TDReportMisc',  reportPath + 'tdreportimprovement.jasper'),
                        new SubReport( 'TDReportAnnotation', reportPath + 'tdreportannotation.jasper'),
                    ] as SubReport[]
                },
                getReportData : { return reportdata },
                getParameters : {
                    def params = svcParams.getStandardParameter()
                    params.LOGOLGU = com.rameses.etracs.shared.EtracsReportUtil.getInputStream("lgu-logo.png")
                    params.BACKGROUND = com.rameses.etracs.shared.EtracsReportUtil.getInputStream("background.png")
                    params.LOGOASSESSOR = com.rameses.etracs.shared.EtracsReportUtil.getInputStream("lgu-assessor.png")
                    params.LOGOBLGF = com.rameses.etracs.shared.EtracsReportUtil.getInputStream("lgu-blgf.png")
                    return params 
                },
            ] as ReportModel 

        }
        
    ]]>    
    </code>
     <pages>
        <page  template="com.rameses.gov.etracs.rpt.report.FAASBatchReportPage" />
    </pages>
</workunit>