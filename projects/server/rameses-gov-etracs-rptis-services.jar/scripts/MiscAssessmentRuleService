import com.rameses.annotations.*;
import com.rameses.rules.common.*;
import com.rameses.util.*;

import rptis.facts.*;
import rptis.actions.*;
import rptis.misc.facts.*;
import rptis.misc.actions.*;

public class MiscAssessmentRuleService  
{
	@Env 
	def env

	@ActiveDB('miscrpu')
	def em

	@Resource("RuleService")	
	def ruleSvc

	@ActiveDB("rule")
	def ruleDB

	@Service('NumberService')
	def numSvc

	@Service('DateService')
	def dtSvc

	@Service('RPTUtil')
	def util


	

	String RULESET = "miscassessment";

	@ProxyMethod
	public def execute(rpu) throws Exception {
		rpu.assessments = []
		def request = [rpu:rpu, variables:[], assessments:[]]; 
		request.facts = createFacts(request);
		request.actions = buildActions( request );

		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		grps.each{g ->
			ruleSvc.execute( RULESET, request.facts, request.actions, g.name);
		}
        return rpu;
	}

	def createFacts(request){
		def rpu = request.rpu
		def facts = []

		/*-------------------------------------
		* DATE FACTS
		-------------------------------------*/
		def currDate = dtSvc.serverDate;
		def dt = currDate;
		if (rpu.issuedate){
			dt = java.sql.Date.valueOf( rpu.issuedate );
		}
		facts << new EffectiveDate( dt );
		facts << new CurrentDate(currDate);

		rpu.useswornamount = util.toBoolean(rpu.useswornamount, false)
		facts << new MiscRPU(rpu)

		rpu.items.each{
			facts << new MiscItem(rpu, it)
		}
		return facts
	}

	def buildActions(request) {
		def actions = new RuleAction();
		actions.addCommand( "calc-bmv", new CalcBaseMarketValue( request:request));
		actions.addCommand( "calc-depreciation", new CalcDepreciation( request:request));
		actions.addCommand( "calc-mv", new CalcMarketValue( request:request));
		actions.addCommand( "calc-al", new CalcAssessLevel( request:request, em:em, NS:numSvc ));
		actions.addCommand( "calc-av", new CalcAssessValue( request:request));

		actions.addCommand( "calc-rpu-bmv", new CalcRPUBaseMarketValue( request:request));
		actions.addCommand( "calc-rpu-mv", new CalcRPUMarketValue( request:request));
		actions.addCommand( "calc-rpu-al", new CalcRPUAssessLevel( request:request, em:em));
		actions.addCommand( "calc-rpu-av", new CalcRPUAssessValue( request:request));

		actions.addCommand( "add-derive-var", new AddDeriveVariable( request:request));

		actions.addCommand( "add-assessment-info", new AddAssessmentInfo( request:request));
		return actions;
	}
}

