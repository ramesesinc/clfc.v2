import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class FAASSupportService
{
	@Env
	def env 

	@ActiveDB('faas_support')
	def em 

	@Service('FAASService')
	def faasSvc

	@Service('EntityService')
	def entitySvc

	@Service('RealPropertyService')
	def rpSvc

	@Service('RPUService')
	def rpuSvc 

	@Service('ExaminationService')
	def examinationSvc

	@Service('RPTRequirementService')
	def reqSvc 

	@Service('RPTUtil')
	def util

	@Service('RPTLedgerService')
	def ledgerSvc


	@ProxyMethod
	public def getFaasData(faas){
		def faasdata = faasSvc.openFaas(faas)
		faasdata.rpu.rpumaster = rpuSvc.openRpuMaster(faas.rpu)
		faasdata.taxpayer = entitySvc.open(faas.taxpayer)
		faasdata.examinationfindings = examinationSvc.getFindings( faas.objid ).each{
			it = examinationSvc.open(it)
		}
		faasdata.requirements = reqSvc.getRequirements(faas.objid)
		faasdata.image = getImageData(faasdata)
		faasdata.tasks = faasSvc.getTasks(faas)
		faasdata.signatory = faasSvc.findSignatory(faas)
		return faasdata 
	}


	@ProxyMethod
	public def getRequirements( faas ) {
		faas.requirements = reqSvc.getRequirements(faas.objid)			
		faas.image = getImageData(faas)
		return faas 
	}

	@ProxyMethod
	public def getFaasImages(faas){
		faas.examinationfindings = examinationSvc.getFindings( faas.objid ).each{
			it = examinationSvc.open(it)
		}
		faas.requirements = reqSvc.getRequirements(faas.objid)
		faas.image = getImageData(faas)
		return faas 
	}

	def getImageData(faasdata){
		def refids = [faasdata.objid]
		if (faasdata.examinationfindings)
			refids += faasdata.examinationfindings.objid 
		if (faasdata.requirements)
			refids += faasdata.requirements.objid
		return util.getImageData(refids)
	}


	@ProxyMethod
	public void changeModeToDataCapture( tdno ) {
		if (!tdno) throw new Exception('TD No. if required.')

		def faas = faasSvc.getFaasByTdNo(tdno)
		if (faas.state != 'INTERIM')
			throw new Exception('FAAS state is invalid. Only INTERIM state is allowed.')

		em.updateDataCaptureFlag([objid:faas.objid, datacapture:1])
		em.deleteTasks(faas)
	}	


	@ProxyMethod
	public def deleteApprovedFaas( params ) {
		if (!params.tdno) 
			throw new Exception('TD No. if required.')

		def faas = faasSvc.getFaasByTdNo(params.tdno)
		if (!faas)
			throw new Exception('FAAS does not exist.')
		if (faas.state != 'CURRENT')
			throw new Exception('FAAS state is invalid. Only CURRENT record is allowed.')

		if (util.toBoolean(faas.datacapture, true) ==  false )
			throw new Exception('Cannot delete FAAS. Only data captured record is allowed.')

		checkPaymentMade(faas)
		checkExistingImprovements(faas)

		def ledger = em.findLedgerByFaasId(faas)
		if (ledger){
			ledgerSvc.deleteLedger(ledger)
		}

		faas.allowdelete = true 
		faasSvc.deleteFaas(faas)
		return params 
	}

	void checkPaymentMade(faas){
		def pmt = em.findOnlinePaymentByFaas(faas)
		if (pmt)
			throw new Exception('Cannot delete FAAS. Online payment has already been made.')
	}


	void checkExistingImprovements(faas){
		if ( ! faas.rpu.rputype.equalsIgnoreCase('land'))
			return 

		def improvements = em.findExistingImprovements(faas)
		if (improvements)
			throw new Exception('Cannot delete FAAS. It is already referenced by improvements.')
	}

}
 