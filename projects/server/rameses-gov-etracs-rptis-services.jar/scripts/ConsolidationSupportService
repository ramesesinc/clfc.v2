import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import com.rameses.util.*


class ConsolidationSupportService
{
    @Env
    def env
    
    @Service('ConsolidationService')
    def svc 

    @ActiveDB('consolidation')
    def em

    @ActiveDB('consolidation_task')
    def taskEm 

    @ActiveDB('faas_task')
    def faastaskEm

    @Service('ExaminationService')
    def examinationSvc

    @Service('RPTRequirementService')
    def reqSvc 

    @Service('FAASService')
    def faasSvc

    @Service('DBImageService')
    def imageSvc

    @Service('EntityService')
    def entitySvc 

    @Service('TxnRefService')
    def txnRef

    

    @ProxyMethod
    public def buildConsolidationData(consolidation){
        def data = [:]
        data.putAll(svc.openConsolidation(consolidation.objid))

        data.consolidatedlands = svc.getConsolidatedLands(consolidation.objid)
        data.affectedrpus = svc.getAffectedRpus(consolidation.objid)
        data.requirements = reqSvc.getRequirements(consolidation.objid)

        data.examinationfindings = examinationSvc.getFindings( consolidation.objid ).each{
            it.putAll(examinationSvc.open(it))
        }

        data.faases = []
        data.tasks = []

        def faas = [objid:consolidation.newfaasid]
        data.faases << faasSvc.openFaas(faas)
        data.tasks << [type:'faas', tasks:faasSvc.getTasks(faas)]

        data.affectedrpus.each{
            faas = [objid:it.newfaasid]
            data.faases << faasSvc.openFaas(faas)
            data.tasks << [type:'faas', tasks:faasSvc.getTasks(faas)]
        }

        data.faases.each{
            it.taxpayer = entitySvc.open(it.taxpayer)
        }

        data.tasks << [type:'consolidation', tasks:em.getTasks(consolidation)]
        data.image = getImageData(consolidation)
        return data 
    }


    @ProxyMethod
    public def postConsolidationData(consolidation){
        
        println 'processing consolidation.faases'
        consolidation.faases.each{
            entitySvc.save(it.taxpayer)
            if (existFaas(it))
                faasSvc.updateFaas(it)
            else
                faasSvc.createFaas(it)
        }

        println 'Saving consolidation'
        em.save(consolidation)

        consolidation.consolidatedlands.each{
            em.save(it, 'consolidatedland')
            txnRef.insertRef(it.landfaasid, consolidation.objid, 'FAAS is currently referenced by Consolidation No. ' + consolidation.txnno +'.')
        }

        println 'processing examinationfindings'
        consolidation.examinationfindings.each{
            examinationSvc.save(it)
        }

        println 'processing consolidation requirements'
        consolidation.requirements.each{
            reqSvc.save(it)
        }

        println 'processing consolidation.affectedrpus'
        consolidation.affectedrpus.each{
            em.save(it, 'affectedrpu')
        }

        consolidation.tasks.each{item ->
            if (item.type == 'consolidation'){
                item.tasks.each{ 
                    taskEm.save(it)
                }
            }
            else if (item.type == 'faas'){
                item.tasks.each{ 
                    faastaskEm.save(it)
                }
            }
            
        }

        saveImageData(consolidation.image)
    }


    @ProxyMethod
    public def buildRequirementsData(consolidation){
        def data = [:]
        data.requirements = reqSvc.getRequirements(consolidation.objid)

        def headers = []
        data.requirements.each{
            headers += imageSvc.getImages([refid:it.objid])
        }

        def chunks = []
        headers.each{
            chunks += imageSvc.getImageItems(it)
        }       
        data.image = [headers:headers, chunks:chunks]
        return data 
    }


    @ProxyMethod
    public void repostConsolidationRequirements(reqdata){
        reqdata.requirements.each{
            reqSvc.save(it)
        }
        saveImageData(reqdata.image)
        println 'Consolidation requirements have been successfully reposted.'
    }    

    void saveImageData(image){
        if (!image) return
        
        image.headers.each{
            imageSvc.saveHeader(it)
        }
        image.chunks.each{
            imageSvc.saveItem(it)
        }
    }

    def getImageData(consolidation){
        def headers = imageSvc.getImages([refid:consolidation.objid])
        
        headers += imageSvc.getImages([refid:consolidation.newfaasid])

        consolidation.examinationfindings.each{
            headers += imageSvc.getImages([refid:it.objid])
        }

        consolidation.affectedrpus.each{
            headers += imageSvc.getImages([refid:it.newfaasid])
        }

        reqSvc.getRequirements(consolidation.objid).each{
            headers += imageSvc.getImages([refid:it.objid])
        }

        def chunks = []
        headers.each{
            chunks += imageSvc.getImageItems(it)
        }       
        return [headers:headers, chunks:chunks]
    }

    boolean existFaas(faas){
        return faasSvc.findFaasById(faas.objid) != null
    }
}


