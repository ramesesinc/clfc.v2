import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class NewLoanProductTypeService extends ActiveCrudListService {

	@Env
	def env;

	@ActiveDB("loan_producttype")
	def em;

	@ActiveDB('datatxnlog') 
	def txnlog;

	@ActiveDB("loan_producttype_attribute")
	def producttype_attribute;

	@ActiveDB("posting_header")
	def posting_header;

	@Service("DateService")
	def dateSvc;

	@Service("LOVService")
	def lovSvc;

	private def DEFAULT_LOAN_VARLIST = ["AMOUNT", "BALANCE", "TOTAL_PAYMENT", "TOTAL_DUE"]
	private def DEFAULT_POSTING_VARLIST = ["DATE_PAID", "REMARKS", "DATE_PAID", "REFNO"]

	@ProxyMethod
	public def getColumns( params ) {
		def cols = [];

		if (!params.state) cols << [name: "txnstate", caption: "Status"];

		cols << [name: "code", caption: "Code"];
		cols << [name: "title", caption: "Title"];
		cols << [name: "paymentschedule", caption: "Payment Schedule"];

		return cols;
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? params.searchtext : "") + "%";
		if (params.state) {
			params._listMethod = "getListByState";
		}
	}

	def getUser() {
		return [objid: env.USERID, name: env.NAME];
	}

	@ProxyMethod
	public def create( data ) {
		data.dtcreated = dateSvc.serverDate;
		data.author = getUser();
		if (!data.txnstate) data.txnstate = "DRAFT";

		return saveData(data, "create");
	}

	@ProxyMethod
	public def update( data ) {
		return saveData(data, "update");
	}

	def saveData( data, mode ) {

		def info;
		def _addedgenattr, _addedloanattr;
		def _removedgenattr, _removedloanattr;
		def _genattr, _loanattr;

		if (data.generalinfo) {
			info = data.generalinfo;
			_addedgenattr = info._addedattr? info.remove("_addedattr") : [];
			_removedgenattr = info._removedattr? info.remove("_removedattr") : [];
			_genattr = info.attributes? info.remove("attributes") : [];
		}

		if (data.loaninfo) {
			info = data.loaninfo;
			_addedloanattr = info._addedattr? info.remove("_addedattr") : [];
			_removedloanattr = info._removedattr? info.remove("_removedattr") : [];
			_loanattr = info.attributes? info.remove("attributes") : [];
		}

		if (mode == 'create') {
			em.create(data);
		} else if (mode == 'update') {
			em.update(data);
		}
			
		saveAttributes(data, _genattr, _addedgenattr, _removedgenattr, "GENERAL");
		saveAttributes(data, _loanattr, _addedloanattr, _removedloanattr, "LOAN");

		return open(data);
	}

	void saveAttributes( data, list, added, removed, category ) {
		removed?.each{ o->
			em.delete(o, "attribute");
		}


		added?.each{ o->
			if (!o.parentid) o.parentid = data.code;
			o.category = category;
			em.create(o, "attribute");
		}

		list?.findAll{ it._updated==true }?.each{ o->
			if (!o.parentid) o.parentid = data.code;
			o.category = category;
			em.update(o, "attribute");
		}
	}

	@ProxyMethod
	public def getStates() {
		return [
			[caption: "All"],
			[caption: "DRAFT", state: "DRAFT"],
			[caption: "ACTIVATED", state: "ACTIVATED"],
			[caption: "DEACTIVATED", state: "DEACTIVATED"]
		];
	}

	void afterOpen( data ) {

		if (data.generalinfo) {
			def list = [];
			def x = em.getAttributesByCategory([code: data.code, category: "GENERAL"]);
			x?.each{ o->
				def i = em.read(o, "attribute");
				if (i) list << i;
			}
			data.generalinfo.attributes = list;
		}

		if (data.loaninfo) {
			def list = [];
			def x = em.getAttributesByCategory([code: data.code, category: "LOAN"]);
			x?.each{ o->
				def i = em.read(o, "attribute");
				if (i) list << i;
			}

			data.loaninfo.attributes = list;
		}

		/*
		data.attributes = [];
		def l = em.getAttributes(data);
		l.each{ o->
			def i = em.read(o, "attribute");
			data.attributes << i;
		}
		*/
	}

	@ProxyMethod
	public def getDefaultPostingHeader() {
		def xlist = posting_header.getList([searchtext: '%']);
		
		def list = [], item;
		xlist?.each{ o->
			item = list?.find{ it.code == o.code }
			if (!item) list << o;
		}

		list?.sort{ it.sequence }
		list?.eachWithIndex{ o, idx->
			o.index = idx;
			o.sequence = (idx + 1);
			o.isfirst = false;
			o.islast = false;
		}

		if (list.size() > 0) {
			list.sort{ it.sequence }
			list[0].isfirst = true;
			list[list.size() - 1].islast = true;
		}

		return list;
	}

	@ProxyMethod
	public def getDefaultGeneralInfoAttributes() {
		def list = getDefaultAttributes([category: 'GENERAL']);
		list.each{ o->
			def val = o.attribute?.defaultvalue;
			o.value = val;
			o.attribute?.value = val;
			o.usedefault = 1;
		}
		return list;
	}

	@ProxyMethod
	public def getDefaultLoanInfoAttributes() {
		def list = getDefaultAttributes([category: 'LOAN']);
		list.each{ o->
			o.handler = o.attribute.type;
			o.computeduringapplication = 1;
			o.computeduringposting = 0;
			o.computeuponmaturity = 0;
		}
		return list;
	}

	@ProxyMethod
	public def getPostingGroup() {
		def list = lovSvc.getKeyValues("POSTING_GROUP");
		return list;
	}

	def getDefaultAttributes( params ) {
		if (!params.category) throw new RuntimeException("Please specify category.");

		def list = [];
		def x = producttype_attribute.getDefaultAttributesByCategory(params);
		x?.eachWithIndex{ o, idx->
			def i = producttype_attribute.read(o);
			if (i) {
				//i.value = i.defaultvalue;
				def d = [
					objid		: 'LATTR' + new UID(),
					attributeid	: i.code,
					attribute 	: i,
					index 		: idx
				]
				list << d;
			}
		}

		return list;
	}

	@ProxyMethod
	public def getLoanInfoVarlist() {
		def list = [];
		DEFAULT_LOAN_VARLIST.eachWithIndex{ itm, idx->
			def item = [
				caption 	: itm,
				title 		: itm,
				signature 	: itm,
				handler 	: "decimal",
				description : "(decimal)"
			];
			list << item
		}
		return list;
	}

	@ProxyMethod
	public def activate( params ) {
		def data = changeState(params, "ACTIVATED");
		return open(data);
	}

	@ProxyMethod
	public def deactivate( params ) {
		def data = changeState(params, "DEACTIVATED");
		return open(data);
	}

	def changeState( params, state ) {
		def data = em.read(params);
		if (!data) throw new RuntimeException("Product type record does not exist or has already been deleted.");

		if (data.txnstate == state) {
			throw new RuntimeException("Product type record has already been " + state + ".");
		}

		data.txnstate = state;
		em.update(data);

		def action, remarks;

		switch (data.txnstate) {
			case 'ACTIVATED':
				action = "Activate";
				remarks = "Product type activated";
				break;
			case 'DEACTIVATED':
				action = "Deactivate";
				remarks = "Product type deactivated";
				break;
		}

		if (action && remarks) {

			def loginfo = [
				objid 	: 'TLOG' + new UID(), 
				txndate : dateSvc.serverDate, 
				txnid   : data.code, 
				user    : [objid: env.USERID, username: env.USER], 
				action	: action, 
				remarks : remarks 
			]; 
			txnlog.create( loginfo ); 
		}

		return open(data);
	}
}