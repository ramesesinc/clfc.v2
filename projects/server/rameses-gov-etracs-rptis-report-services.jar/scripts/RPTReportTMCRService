import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID

class RPTReportTMCRService
{
    @ActiveDB('rptreport_tmcr')
    def em


	@Async
    @ProxyMethod
	public def generateTMCRDetailed( params ) {
		def list = []
		params.barangayid = params.barangay?.objid
		params.tmcrfields = getTmcrFields()

		def currentlist = em.getCurrentTmcrList(params)
		if (!currentlist) throw new Exception('Record(s) not found.')

		currentlist.each{currentfaas ->
			def cancelledfaases = []
			getCancelledTmcrFaases(cancelledfaases, currentfaas, params)
			if (cancelledfaases){
				list += cancelledfaases 
				list << currentfaas 
			}
			else{
				list << currentfaas 
			}
			list << [section:params.section, barangay:currentfaas.barangay]
			list << [section:params.section, barangay:currentfaas.barangay]
		}
		return [reportdata:list]
	}

	void getCancelledTmcrFaases(cflist,faas, params){
		params.faasid = faas.objid 
		def cancelledfaases = em.getCancelledTmcrFaases(params)
		if (cancelledfaases){
			cflist.addAll(0, cancelledfaases)
			cancelledfaases.each{
				getCancelledTmcrFaases(cflist, it, params)
			}
		}
	}

	def getTmcrFields(){
		return '''
			f.objid, b.name AS barangay, pc.code AS classcode, f.txntype_objid,
			f.state,  f.memoranda, f.owner_name, f.owner_address, r.rputype, f.tdno, f.titleno, 
			rp.cadastrallotno, rp.section, rp.surveyno, rp.blockno, r.ry,  
			r.fullpin, r.totalareasqm, r.totalareaha, r.totalav, r.totalmv 
		'''
	}





    @Async
    @ProxyMethod
	public def generateTMCR( params )  {
		def list;
		def index;
		def format = params.format?.caption;
		def province;
		def municipality;
		String structure = "";
		String machinery = "";
		String others = "";

		params.barangayid = params.barangay?.objid
		if (!format) format = 'format a'

		if(format.equalsIgnoreCase("format a")){
			list = em.getTmcrList(params);
		}
		
		if(format.equalsIgnoreCase("format b")){
			def provinceList = em.getProvinceName();
		
			list = em.getTmcrList2(params);

			list.each{
				def rputype = it.rputype;

				//get the province name
				provinceList.each{
					province = it.name;
				}
				it.province = province;
				it.municipality = params.lgu.name;

				//get the lgu index nos.
				if(params.barangayid){
					def indexlist = params.barangayid.tokenize("-");
					if(indexlist.size()>0){
						index = [
							prov: indexlist.get(0),
							mun: indexlist.get(1),
							bar: indexlist.get(2)
						];
						list.each{
							it.index = index;				
						}
					}
				}

				//get the bldg structure
				if(rputype=="bldg"){
					em.getBldgTypeByRpuId([rpuid:it.rpuid]).each{
						structure+=it.name+", ";
					}
					it.bldgstructure = structure;
					it.code= '';
					it.totalareasqm = 0.00;
					structure = "";
				}

				//get the machinery
				if(rputype=="mach"){
					em.getMachineByRpuId([rpuid:it.rpuid]).each{
						machinery+=it.name+", ";
					}
					it.machinery = machinery;
					it.code= '';
					machinery = "";
				}

				//get misc
				if(rputype == "misc" || rputype == "planttree"){
					def othersList = em.getMiscByRpuId([rpuid:it.rpuid]) + em.getPlantTreeByRpuId([rpuid:it.rpuid]);
					othersList.each{
						others+=it.name+", ";
					}
					it.others = others;
					it.code= '';
					others = "";
				}
			}
		}
		if( ! list ) throw new Exception('Records not found.')
		return [reportdata:list]
	}



}
