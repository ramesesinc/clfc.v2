import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.text.DateFormatSymbols;
import java.math.BigDecimal;

class WaterworksMeterReadingService extends ActiveListService{

	@ActiveDB(value='waterworks_meter_reading', em="waterworks")
	def em;

	@Service('DateService')
	def dateSvc;

	@ProxyMethod
	def create(params){
		return em.create(params);
	}

	@ProxyMethod
	def update(params){
		return em.update(params);
	}

	@ProxyMethod
	def delete(params){
		return em.delete(params);
	}

	@ProxyMethod
	def getLatestReading(params){
		return em.findLatestReading(params);
	}

	@ProxyMethod
	def getPreviousReading(params){
		return em.findReading(params);
	}

	@ProxyMethod
	def getListForCapture(params){
		def list = em.getList();
	}

	//this data is used for generating bar charts in the bill report.
	@ProxyMethod
	def getConsumptionTable(int columns, def acctid){
		def list = [];
		int year = dateSvc.getServerYear();
		int month = dateSvc.getServerMonth();
		for(int c = 1; c <= columns; c++){
			def reading = em.findReadingByAccount(['acctid':acctid, 'month':month, 'year':year]);
			String monthName =  new DateFormatSymbols().getMonths()[month-1].substring(0,3);
			if(reading) list << ['month': monthName, 'consumed': new BigDecimal(reading.consumed)];
			if(!reading) list << ['month': monthName, 'consumed': new BigDecimal(0.00)];
			month--;
			if(month == 0){
				month = 12;
				year = year -1;
			}
		}
		return list;
	}

	@ProxyMethod
	def getMeterReading(params){
		return em.getMeterReading(params);
	}

	@ProxyMethod
	def getReadingListByBarangay(params){
		def list = em.getReadingListByBarangay(params);
		list.each{ r ->
			def prm = [meterid: r.meterid, month:params.month == 12 ? 1 : params.month - 1, year:params.year];
			def prev = getPreviousReading(prm);
			r.previousreading = prev ? prev.currentreading : 0;
		}
		return list;
	}
	
}