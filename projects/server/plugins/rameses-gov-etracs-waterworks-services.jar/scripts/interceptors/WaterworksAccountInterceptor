import com.rameses.annotations.*;
import com.rameses.util.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class WaterworksAccountInterceptor {

	@Service('DateService')
	def dateSvc;

	@Service('SequenceService')
	def seqSvc;

	@ActiveDB(value="waterworks_account_route", em="waterworks")
	def route;

	@ActiveDB(value='waterworks_account_address', em="waterworks")
	def address;

	@Before(pattern="WaterworksAccountService.create")
	public void beforeCreate(evt){
		def params = evt.args[0];
		params.dtstarted = dateSvc.getServerDate();
		params.acctno = "W" + dateSvc.getServerYear() + seqSvc.getNextFormattedSeriesA("WATERWORKS",7);
	}

	@After(pattern="WaterworksAccountService.create")
	public void createAccountRoute(evt){
		def params = evt.args[0];
		def exist = route.getList(params);
		if(params.route){
			if(exist){
				route.update(['routeid':params.route.objid, acctid: params.objid]);
			}else{
				route.create(['routeid':params.route.objid, acctid: params.objid]);
			}
		}
	}

	@After(pattern="WaterworksAccountService.create")
	public void createAccountAddress(evt){
		def params = evt.args[0];
		if(params.address){
			address.create(params.address);
		}else{
			throw new Exception("Address is required!");
		}
	}

	@After(pattern="WaterworksAccountService.update")
	public void updateAccountRoute(evt){
		def params = evt.args[0];
		def exist = route.getList(params);
		if(exist){
			route.updateRoute(['routeid':params.route.objid, acctid: params.objid]);
		}else{
			route.create(['routeid':params.route.objid, acctid: params.objid]);
		}
	}

}