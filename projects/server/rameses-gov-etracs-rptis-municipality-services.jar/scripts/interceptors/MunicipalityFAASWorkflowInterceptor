import com.rameses.annotations.*
import com.rameses.common.*;

class MunicipalityFAASWorkflowInterceptor
{
	@Env
	def env

    @Service('RPTNotificationService')
    def svc 

	@Service('FAASService')
	def faasSvc

	@Service('FAASSupportService')
	def supportSvc 


	@After(pattern="FAASService.approveFaas", eval="#{result.datacapture == 1 || result.datacapture == true}") 
	public void submitDataCaptureToProvince( evt ) {
		def faas = evt.result;
        def methodname = 'postDataCapturedFaas'
        if (faas.previousfaases)
            methodname = 'postManualApprovedTransaction'
            
		def asyncreq    = svc.createAsyncRequest('ProvinceFAASRemoteService', methodname, supportSvc.getFaasData(faas), svc.buildEnvMap(env))
        def msg         = svc.createAsyncMessage(asyncreq[0])
        msg.filetype    = 'faas'
        msg.messagetype = 'faas-datacaptured'
        msg.message     = 'Post data captured FAAS No. ' + (faas.tdno ? faas.tdno : faas.utdno) + '.'
        svc.sendAsyncMessage(msg)
        println 'submitDataCaptureToProvince....'
	}


	@After(pattern="FAASWorkflowService.signal", eval="#{args[0].state.matches('approver') && (args[0].action == null || !args[0].action.matches('return.*'))}") 
	public void approveFaas( evt ) {
		def faas = evt.args[0].data
		faas.putAll(faasSvc.approveFaas(faas))
		
		def asyncreq    = svc.createAsyncRequest('ProvinceFAASRemoteService', 'postMunicipalityApprovedFaas', supportSvc.getFaasData(faas), svc.buildEnvMap(env))
        def msg         = svc.createAsyncMessage(asyncreq[0])
        msg.filetype    = 'faas'
        msg.messagetype = 'faas-municipality-approved'
        msg.message     = 'FAAS No. ' + (faas.tdno ? faas.tdno : faas.utdno) + '.'
        svc.sendAsyncMessage(msg)
        println 'submit Municipality Approved FAAS to Province....'
	}


	@After(pattern="FAASWorkflowService.signal", eval="#{args[0].state.matches('provapprover') && (args[0].action == null || !args[0].action.matches('return.*'))}") 
	public void submitToProvince( evt ) {
        submitFaasForProvinceApproval(evt)
	}	

    @After(pattern="FAASWorkflowService.signal", eval="#{args[0].state.matches('recommender') && (args[0].action != null && args[0].action.matches('submit_to_province'))}") 
    public void submitFaasToProvince( evt ) {
        submitFaasForProvinceApproval(evt)
    }   

    void submitFaasForProvinceApproval(evt){
        def faas = evt.args[0].data;
        def asyncreq = svc.createAsyncRequest('ProvinceFAASRemoteService', 'postFaasForProvinceApproval', supportSvc.getFaasData(faas), svc.buildEnvMap(env))
        def msg         = svc.createAsyncMessage(asyncreq[0])
        msg.filetype    = 'faas'
        msg.groupid     = 'assign-receiver'
        msg.messagetype = 'faas-forprovapproval'
        msg.message     = 'FAAS No. ' + (faas.tdno ? faas.tdno : faas.utdno) + ' (assign-receiver).' 
        svc.sendAsyncMessage(msg)
    }
}

