import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.util.*
import com.rameses.services.extended.*


class RPTLedgerService
{
    @Env
    def env

    @ActiveDB('rptbill')
    def billdb 

    @ActiveDB('rptledger') 
    def em

    @Service('RPTUtil')
    def util

    @Service('DateService')
    def dtSvc

    @Service('NumberService')
    def numSvc

    @Service('FAASService')
    def faasSvc 

    @Service('PropertyClassificationService')
    def pcSvc 

    @Service('RPTBillingService')
    def billingSvc

    @Service('RealPropertyService')
    def rpSvc

    @Service('RPTLedgerService')
    def self

    @Service('RPUService')
    def rpuSvc 


    def SCHEMA_LEDGER   = 'rptledger'
    def SCHEMA_ITEM   = 'ledgeritem'
    def SCHEMA_FAAS     = 'ledgerfaas'
    def SCHEMA_BILLITEM = 'billitem'
    def SCHEMA_CREDIT   = 'credit'
    def SCHEMA_SUBLEDGER   = 'subledger'

    def STATE_PENDING   = 'PENDING'
    def STATE_APPROVED  = 'APPROVED'
    def STATE_CANCELLED = 'CANCELLED'
    def STATE_OPEN      = 'OPEN'
    def STATE_CLOSED    = 'CLOSED'
    def STATE_RECONCILED   = 'RECONCILED'


    @ProxyMethod
    public def openLedger( ledger ) {
        ledger = em.findById(ledger)
        if (!ledger) throw new Exception('Ledger does not exists.')
        ledger.firstqtrpaidontime = util.toBoolean(ledger.firstqtrpaidontime, true)
        ledger.qtrlypaymentavailed = util.toBoolean(ledger.qtrlypaymentavailed, true)
        ledger.qtrlypaymentpaidontime = util.toBoolean(ledger.qtrlypaymentpaidontime, true)
        ledger.taxable = util.toBoolean(ledger.taxable, true)
        ledger.faases = getLedgerFaases(ledger.objid)
        ledger.subledger = em.findSubLedgerById(ledger)
        ledger.subacctno = ledger.subledger?.subacctno
        ledger.parent = ledger.subledger?.parent
        return ledger 
    }

    @ProxyMethod
    public def createLedger( ledger ) {
        ledger.advancebill = false;
        if (ledger.partialbasic == null) ledger.partialbasic = 0.0
        if (ledger.partialbasicint == null) ledger.partialbasicint = 0.0
        if (ledger.partialsef == null) ledger.partialsef = 0.0
        if (ledger.partialsefint == null) ledger.partialsefint = 0.0
        em.create(ledger)
        ledger.faases.each{ ledgerfaas ->
            saveLedgerFaas(ledgerfaas)
        }
        return ledger 
    }

    @ProxyMethod
    public def createSubLedger( subledger ) {
        createLedger(subledger);
        em.create(subledger, SCHEMA_SUBLEDGER)
    }


    @ProxyMethod
    public def updateLedger( ledger ) {
        ledger.advancebill = false;
        ledger.nextbilldate = null;
        ledger.taxable = util.toBoolean(ledger.taxable, true)
        em.update(ledger)    
        ledger.faases?.each{ ledgerfaas ->
            saveLedgerFaas(ledgerfaas)
        }
        return ledger 
    }

    @ProxyMethod
    public def updateSubLedger( subledger ) {
        em.deleteSubledgerFaas(subledger)
        updateLedger(subledger);
        em.update(subledger, SCHEMA_SUBLEDGER)
    }    

    @ProxyMethod
    public void updateState(ledger){
        em.updateState(ledger)
    }


    @ProxyMethod
    public void deleteLedger( ledger ) {
        em.deleteRptBillLedgerAccount(ledger)
        em.deleteRptBillLedgerItem(ledger)
        em.deleteRptBillLedger(ledger)
        em.deleteRptLedgerItem(ledger)
        em.deleteLedgerFaases(ledger)
        em.deleteLedgerCredits(ledger)
        em.deleteLedger(ledger)
    }

    @ProxyMethod
    public void deleteLedgerFaases( ledger ) {
        em.deleteLedgerFaases(ledger)
    }

    @ProxyMethod
    public void deleteSubLedger(subledger ) {
        if (!subledger) throw new Exception('Sub-Ledger is required.')

        em.deleteSubledgerFaas(subledger)
        em.delete(subledger, SCHEMA_SUBLEDGER)
        em.delete(subledger)

    }

    @ProxyMethod
    public def loadLedger( ledger ) {
        ledger = openLedger(ledger)
        ledger._ledgerItems   = getLedgerItems(ledger.objid)
        ledger._debits = getLedgerBillItems(ledger.objid)
        ledger._credits = getLedgerCredits(ledger.objid)
        ledger._subledgers = em.getSubLedgers(ledger)
        return ledger
    }
    
    @ProxyMethod
    public def saveLedgerFaas(ledgerfaas){
        ledgerfaas.taxable = util.toBoolean(ledgerfaas.taxable, true)
        ledgerfaas.backtax = util.toBoolean(ledgerfaas.backtax, false)
        ledgerfaas.reclassed = util.toBoolean(ledgerfaas.reclassed, false)
        ledgerfaas.systemcreated = util.toBoolean(ledgerfaas.systemcreated, true)
        em.save(ledgerfaas, SCHEMA_FAAS)
        return ledgerfaas 
    }

    @ProxyMethod
    public def saveNewRevisionLedgerFaas(ledgerfaas){
        ledgerfaas.state = STATE_APPROVED
        def ledger = openLedger([objid:ledgerfaas.rptledgerid])
        def ledgerfaases = getLedgerFaases(ledger.objid).findAll{it.state == 'APPROVED'}
        if (ledgerfaases){
            def latestfaas = ledgerfaases.last()
            if (ledgerfaas.fromyear != latestfaas.fromyear ){
                ledgerfaases.findAll{it.fromyear == latestfaas.fromyear}.each{lf ->
                    lf.toyear = (ledgerfaas.fromqtr == 1 ? ledgerfaas.fromyear - 1 : ledgerfaas.fromyear)
                    lf.toqtr = (ledgerfaas.fromqtr == 1 ? 4 : ledgerfaas.fromqtr - 1)
                    lf.state = STATE_APPROVED
                    saveLedgerFaas(lf)    
                }
            }
        }
        saveLedgerFaas(ledgerfaas)
        updateLedgerInfoFromNewRevision(ledger, ledgerfaas)
        repostLedgerItems(ledger) 
        return ledgerfaas   
    }

    void updateLedgerInfoFromNewRevision(ledger, ledgerfaas){
        def info = [
            objid       : ledger.objid,
            fullpin     : ledgerfaas.fullpin,
            tdno        : ledgerfaas.tdno, 
            txntype     : ledgerfaas.txntype, 
            classification : ledgerfaas.classification,
            classcode      : ledgerfaas.classification.code,
            totalav        : ledgerfaas.assessedvalue, 
            taxable         : ledgerfaas.taxable 
        ]
        em.updateLedgerInfoFromNewRevision(info)
    }

    @ProxyMethod
    public def saveNewLedgerFaas(ledgerfaas, lastfaas) {
        lastfaas.toyear = (ledgerfaas.fromqtr == 1 ? ledgerfaas.fromyear - 1 : ledgerfaas.fromyear )
        lastfaas.toqtr = (ledgerfaas.fromqtr == 1 ? 4: ledgerfaas.fromqtr - 1 )
        ledgerfaas.state = STATE_APPROVED
        saveLedgerFaas(ledgerfaas)
        saveLedgerFaas(lastfaas)
    }

    @ProxyMethod
    public def fixLedgerFaas(ledgerfaas){
        saveLedgerFaas(ledgerfaas)
        updateAffectedLedgerItemInfo(ledgerfaas)
        em.resetLastBilledInfo(ledgerfaas)
        try{
            billingSvc.generateBillByLedgerId(ledgerfaas.rptledgerid)
        }
        catch(e){
            //
        }
    }

    @ProxyMethod
    public def saveLedgerItem( item ) {
        if (item.basicav == null) item.basicav = item.av 
        if (item.sefav == null) item.sefav = item.av 
        item.classification = item.ledgerfaas.classification
        item.actualuse =  (item.ledgerfaas.actualuse?.objid ? item.ledgerfaas.actualuse : item.ledgerfaas.classification)
        em.save(item, SCHEMA_ITEM)
        em.resetLastBilledInfo(item)
        try{
            billingSvc.generateBillByLedgerId(item.rptledgerid)
        }
        catch(e){}
    }

    void updateAffectedLedgerItemInfo(ledgerfaas){
        def params = [
            rptledgerid : ledgerfaas.rptledgerid, 
            fromyear : ledgerfaas.fromyear,
            toyear   : (ledgerfaas.toyear == 0 ? 9999 : ledgerfaas.toyear),
        ]
        em.getAffectedLedgerItemsByLedgerFaas(params).each{
            em.updateLedgerItemInfo([objid:it.objid, av:ledgerfaas.assessedvalue])
        }
    }

    @ProxyMethod
    public def removeLedgerFaas( ledgerfaas ) {
        em.delete(ledgerfaas, SCHEMA_FAAS)    
    }

    @ProxyMethod
    public def removeLedgerItem( ledgeritem ) {
        def ledger = [objid:ledgeritem.rptledgerid]
        em.deleteRptBillLedgerAccount(ledger)
        em.deleteRptBillLedgerItem(ledger)
        em.deleteRptBillLedger(ledger)
        em.delete(ledgeritem, SCHEMA_ITEM)
        em.clearNextBillDateByLedger(ledger)
    }

    @ProxyMethod
    public def approveLedger( ledger) {
        ledger = openLedger(ledger)
        if (ledger.state == STATE_APPROVED )
            throw new Exception('Ledger has already been approved.')
        if (ledger.state == STATE_CANCELLED)
            throw new Exception('Ledger has already been cancelled.')

        def firstfaas = ledger.faases[0]
        def lastfaas = ledger.faases.last()
        ledger.state            =  STATE_APPROVED
        ledger.lastyearpaid     = (firstfaas.fromqtr == 1 ? firstfaas.fromyear - 1 : firstfaas.fromyear)
        ledger.lastqtrpaid      = (firstfaas.fromqtr == 1 ?  4 : firstfaas.fromqtr - 1)
        ledger.lastitemyear     = (lastfaas.toyear == 0 ? dtSvc.serverYear  : lastfaas.toyear )
        ledger.nextbilldate     = null
        ledger.advancebill      = false;
        em.update(ledger)
        
        ledger.faases.each{  
            it.state = ledger.state 
            approveLedgerFaas(it)
        }

        postLedgerItems(ledger)
        return ledger;
    }

    @ProxyMethod
    public void repostLedgerItems(ledger){
        em.deleteRptBillLedgerItems(ledger)
        em.deleteRptLedgerItems(ledger)
        postLedgerItems(ledger)
        em.resetLastBilledInfo([rptledgerid:ledger.objid])
    }

    @ProxyMethod
    public void postLedgerItems( ledger ) {
        def cy = dtSvc.serverYear 
        def paidqtr = (ledger.lastqtrpaid == 4 ? 0 : ledger.lastqtrpaid)
        
        def itemstartyear = (ledger.lastqtrpaid == 4 ? ledger.lastyearpaid + 1 : ledger.lastyearpaid)
        for (int yr = itemstartyear; yr <= cy; yr++){
            postLedgerItem(ledger, yr, paidqtr)
            paidqtr = 0;
        }
    }

    @ProxyMethod
    public def postLedgerItemsUptoYear( ledger, toyear ) {
        def fromyear = ledger.lastyearpaid 
        def paidqtr = ledger.lastqtrpaid 

        if (ledger.partialbasic > 0 || ledger.partialsef > 0){
            paidqtr = ledger.lastqtrpaid  - 1
        }

        if (ledger.lastqtrpaid == 4 && ledger.partialbasic == 0 && ledger.partialsef == 0){
            fromyear = ledger.lastyearpaid + 1
            paidqtr = 0
        }

        if (fromyear > ledger.lastyearpaid)
            paidqtr = 0 

        if (fromyear <= toyear){
            ledger.faases = getLedgerFaases(ledger.objid).findAll{it.state == 'APPROVED'}
            for (int yr = fromyear; yr <= toyear; yr++){
                if( yr != fromyear) paidqtr = 0
                postLedgerItem(ledger, yr, paidqtr)
                paidqtr = 0
            }
        }
    }


    @ProxyMethod
    public void postLedgerItem(ledger, yr, paidqtr){
        def item = null
        def ledgerfaases = ledger.faases.findAll{yr >= it.fromyear && (yr <= it.toyear || it.toyear == 0) }
        ledgerfaases.each{ledgerfaas->
            def params = [
                ledger      : ledger, 
                ledgerfaas  : ledgerfaas, 
                yr          : yr, 
                av          : ledgerfaas.assessedvalue, 
                basicav     : ledgerfaas.assessedvalue, 
                sefav       : ledgerfaas.assessedvalue, 
                classification   : ledgerfaas.classification,
                actualuse   : (ledgerfaas.actualuse?.objid ? ledgerfaas.actualuse : ledgerfaas.classification),
            ]
            self.calcLedgerItemAssessedValue(params)
            item = [
                objid : 'RL' + new java.rmi.server.UID(), 
                rptledgerid : ledger.objid, 
                rptledgerfaasid : ledgerfaas.objid, 
                year : yr, 
                paidqtr : paidqtr, 
                av : params.av, 
                basicav : params.basicav,
                sefav   : params.sefav,
                paid : 0, 
                taxdifference : 0,
                classification : params.classification,
                actualuse : params.actualuse,
                remarks : (params.av != ledgerfaas.assessedvalue ? 'Staggered AV' : 'Annual Receivable'),
            ]

            def olditem = em.findLedgerItemByYears([objid:ledger.objid, year:yr, actualuseid:params.actualuse.objid])
            if (olditem){
                item.objid = olditem.objid 
                item.paidqtr = paidqtr 
                item.paid = olditem.paid 
                em.update(item, SCHEMA_ITEM);
            }
            else {
                em.create(item, SCHEMA_ITEM);
            }
        }        
        paidqtr = 0
    }


    /* temporary hack: intercepted to adjust av, such as, staggered application */
    @ProxyMethod
    public def calcLedgerItemAssessedValue(params){
        return params
    }


    def createLedgerItem(ledger, yr, paidqtr){
        def ledgerfaas = ledger.faases.find{yr >= it.fromyear && (yr <= it.toyear || it.toyear == 0) }

        def item = null
        if (ledgerfaas){

            def params = [ledger:ledger, ledgerfaas:ledgerfaas, yr:yr, av:ledgerfaas.assessedvalue]
            self.calcLedgerItemAssessedValue(params)

            item = [
                objid : 'RL' + new java.rmi.server.UID(), 
                rptledgerid : ledger.objid, 
                rptledgerfaasid : ledgerfaas.objid, 
                year : yr, 
                paidqtr : paidqtr, 
                av : params.av, 
                paid : 0, 
                taxdifference : 0,
                remarks : (params.av != ledgerfaas.assessedvalue ? 'Staggered AV' : 'Annual Receivable'),
            ]
        }
        return item
    }

    @ProxyMethod
    public void approveLedgerFaas( ledgerfaas  ) {
        em.approveLedgerFaas(ledgerfaas)
    }

    @ProxyMethod
    public void checkLedgerBalance(faasid){
        def ledger = em.findApprovedLedgerByFaasId([faasid:faasid])
        if (!ledger)
            throw new Exception('Ledger does not exist or has already been deleted.')

        def pdate = dtSvc.parseCurrentDate();
            
        if (util.isTrue(ledger.taxable)) {
            if ( ledger.lastyearpaid < pdate.year || (ledger.lastyearpaid == pdate.year && ledger.lastqtrpaid < pdate.qtr))
                throw new Exception('Ledger has not yet been fully paid.')    
        }
        else {
            em.updateLastYearQtrPaid([toyear:dtSvc.serverYear, toqtr:4, rptledgerid:ledger.objid])
        }
    }

    @ProxyMethod
    public def checkLedgerApprovedState(faasid){
        def ledger = getLedgerByFaasId(faasid)
        if (ledger.state == STATE_CANCELLED)
            throw new Exception('Ledger has already been cancelled.')
        if (ledger.state == STATE_PENDING)
            throw new Exception('Ledger is still pending.')

    }

    @ProxyMethod
    public void clearNextBillDateByLedger( ledgerid ) {
        em.clearNextBillDateByLedger([objid:ledgerid])
    }

    @ProxyMethod
    public void clearNextBillDate() {
        em.clearNextBillDate([:])
    }


    @ProxyMethod
    public def getLedgerByFaasId( faasid ) {
        def ledger = em.findLedgerByFaasId([faasid:faasid])
        if (!ledger) throw new Exception('Ledger does not exist or has already been deleted.')
        ledger.firstqtrpaidontime = util.toBoolean(ledger.firstqtrpaidontime, false)
        ledger.qtrlypaymentavailed = util.toBoolean(ledger.qtrlypaymentavailed, false)
        ledger.qtrlypaymentpaidontime = util.toBoolean(ledger.qtrlypaymentpaidontime, false )
        return ledger
    }


    @ProxyMethod
    public def getLedgerFaases(ledgerid){
        return em.getLedgerFaases([rptledgerid:ledgerid]).each {
                        it.taxable = util.toBoolean(it.taxable, true)
                        it.backtax = util.toBoolean(it.backtax, false)
                        it.reclassed = util.toBoolean(it.reclassed, false)
                        it.systemcreated = util.toBoolean(it.systemcreated, true)
                    }
    }


    @ProxyMethod
    public def getLedgerBillItems(ledgerid){
        return em.getLedgerBillItems([rptledgerid:ledgerid])
    }

    @ProxyMethod
    public def getLedgerItems(ledgerid ) {
        return em.getLedgerItems([rptledgerid:ledgerid])
    }


    @ProxyMethod
    public def getLedgerCredits(ledgerid) {
        def credits = em.getLedgerCredits([rptledgerid:ledgerid])
        util.buildPeriodCovered(credits)
        return credits 
    }


    @ProxyMethod
    public def getTxnTypes(){
        return faasSvc.getTxnTypes();
    }

    @ProxyMethod
    public def getClassifications(){
        return pcSvc.getClassifications([:])
    }


    @ProxyMethod
    public def postLedgerFaas( ledgerfaas ) {
        def ledgerfaases = getLedgerFaases(ledgerfaas.rptledgerid)
        def latestledgerfaas = ledgerfaases.find{it.toyear == 0}
        if (latestledgerfaas) {
            if (latestledgerfaas.fromyear == ledgerfaas.fromyear){
                latestledgerfaas.state = STATE_CANCELLED 
                latestledgerfaas.toyear = latestledgerfaas.fromyear 
            }
            else {
                latestledgerfaas.toyear = (ledgerfaas.fromqtr == 1 ? ledgerfaas.fromyear - 1 : ledgerfaas.fromyear)
            }
            latestledgerfaas.toqtr = (ledgerfaas.fromqtr == 1 ? 4 : ledgerfaas.fromqtr - 1)
            saveLedgerFaas(latestledgerfaas)
        }
        saveLedgerFaas(ledgerfaas)
    }


    @ProxyMethod
    public void postCredit( payment ) {
        payment.dtposted = dtSvc.serverDate 
        payment.postedby = env.NAME
        payment.postedbytitle = env.JOBTITLE
        def len = payment.paidby.name.length()
        if (len > 100 ) len = 100
        payment.paidby = payment.paidby
        em.create(payment, SCHEMA_CREDIT)
        em.updateLastYearQtrPaid(payment)    

        em.getCreditedLedgerItems(payment).each{
            def params = [objid:it.objid, paidqtr:4, paid:1]
            if (it.year == payment.toyear){
                params.paidqtr = payment.toqtr 
                params.paid = (payment.toqtr == 4 ? 1 : 0)
            }
            em.updateLedgerItemPaidInfo(params)
        }

        em.resetLastBilledInfo(payment)
        try{
            billingSvc.generateBillByLedgerId(payment.rptledgerid)
        }
        catch(e){
            e.printStackTrace()
        }
    }

    @ProxyMethod
    public def approveMigratedLedger( ledger) {
        ledger = openLedger(ledger)
        if (ledger.state == STATE_CANCELLED)
            throw new Exception('Ledger has already been cancelled.')

        if (ledger.faases){
            def firstfaas = ledger.faases[0]
            def lastfaas = ledger.faases.last()
            ledger.state            =  STATE_APPROVED
            ledger.lastyearpaid     = (firstfaas.fromqtr == 1 ? firstfaas.fromyear - 1 : firstfaas.fromyear)
            ledger.lastqtrpaid      = (firstfaas.fromqtr == 1 ?  4 : firstfaas.fromqtr - 1)
            ledger.lastitemyear     = (lastfaas.toyear == 0 ? dtSvc.serverYear  : lastfaas.toyear )
            ledger.nextbilldate     = null
            ledger.advancebill      = false;
            em.update(ledger)
            
            ledger.faases.each{  
                it.state = ledger.state 
                approveLedgerFaas(it)
                postLedgerFaasData(it)
            }
        }
        return ledger;
    }


    @ProxyMethod
    public void fixLedger( info ) {
        if (!info.objid) throw new Exception('Ledger ID is required.')
        if (!info.taxpayer) throw new Exception('Taxpayer is required.')

        info.rptledgerid = info.objid 
        info.partialledyear = null
        info.partialledqtr = null 
        info.taxpayerid = info.taxpayer.objid 
        info.taxpayername = info.taxpayer.name
        info.partialbasicdisc = 0.0
        info.partialsefdisc = 0.0

        def partial = info.partialbasic + info.partialbasicint + info.partialsef + info.partialsefint
        if ( partial > 0){
            info.partialledyear = info.lastyearpaid
            info.partialledqtr =  info.lastqtrpaid
        }
        em.fixLedgerInfo(info)
        repostLedgerItems(openLedger([objid:info.rptledgerid]))
        try{
            billingSvc.generateBillByLedgerId(info.rptledgerid)
        }
        catch(e){
            println e.message 
        }
    }

    void validateFixPartial(info, item){
        if (info.basic > item.basic )
            throw new Exception('Partial Basic must not exceed ' + numSvc.format('#,##0.00',item.basic) + '.')
        if (info.basicint > item.basicint )
            throw new Exception('Partial Basic Penalty must not exceed ' + numSvc.format('#,##0.00',item.basicint) + '.')

        if (info.sef > item.sef )
            throw new Exception('Partial SEF must not exceed ' + numSvc.format('#,##0.00',item.sef) + '.')
        if (info.sefint > item.sefint )
            throw new Exception('Partial SEF Penalty must not exceed ' + numSvc.format('#,##0.00',item.sefint) + '.')
    }




    @ProxyMethod
    public void postLedgerFaasData(faas){
        def ledger = getLedgerByFaasId(faas.previousfaases[0].prevfaasid)
        if (!ledger) throw new Exception('Ledger not found for TD No. ' + faas.tdno + '.')
        ledger.faasid = faas.objid 
        updateLedger(ledger)
        def ledgerfaas = createLedgerFaas(ledger, faas)
        postLedgerFaas(ledgerfaas) 
        postTaxDifference(ledger, ledgerfaas, faas)
        updateLedgerFaasInfo(faas, ledger)
    }

    void postTaxDifference(ledger, ledgerfaas, faas){
        if (ledger.lastyearpaid < faas.effectivityyear)
            return

        //post tax difference 
        def params = [
            rptledgerid:ledger.objid, 
            effectivityyear:faas.effectivityyear,
            effectivityqtr : faas.effectivityqtr,
            currentav : faas.rpu.totalav,
            toyear : (faas.effectivityqtr == 1 ? faas.effectivityyear - 1 : faas.effectivityyear), 
            toqtr : (faas.effectivityqtr == 1 ? 4 : faas.effectivityqtr - 1), 
        ]

        
        def taxdiffitems = em.getLedgerItemsWithTaxDifference(params)

        if (taxdiffitems){
            em.deleteBillLedgerItems(params)
            em.deleteUnpaidLedgerItemsAboveEffectivityYear(params)
        }

        taxdiffitems.each{
            it.objid = 'RLI' + new java.rmi.server.UID() 
            it.rptledgerfaasid = ledgerfaas.objid 
            it.av = it.avdifference 
            it.paidqtr = 0
            it.paid = 0
            it.remarks = 'Tax Difference for ' + it.year 
            it.taxdifference = 1
            em.create(it, SCHEMA_ITEM)
        }

        em.updateLastYearQtrPaid(params)
        
    }

    void updateLedgerFaasInfo(faas, ledger){
        faas.rp = rpSvc.open(faas.rp )
        ledger.faasid          = faas.objid 
        ledger.taxpayer        = faas.taxpayer
        ledger.owner           = faas.owner
        ledger.fullpin         = faas.fullpin
        ledger.tdno            = faas.tdno
        ledger.cadastrallotno  = faas.rp.cadastrallotno
        ledger.rputype         = faas.rpu.rputype
        ledger.txntype         = faas.txntype
        ledger.classcode       = faas.rpu.classification.code
        ledger.classification  = faas.rpu.classification
        ledger.totalav         = faas.rpu.totalav
        ledger.totalmv         = faas.rpu.totalmv
        ledger.totalareaha     = faas.rpu.totalareaha
        ledger.taxable         = util.toBoolean(faas.rpu.taxable, true)
        ledger.prevtdno        = faas.prevtdno
        ledger.titleno         = faas.titleno
        ledger.advancebill     = false;
        em.update(ledger) 
    }


    @ProxyMethod
    public def postNewLedger(faas){
        def ledger = createLedgerInfo(faas)
        createLedger(ledger)
        if (! util.isTrue(faas.datacapture)){
            approveLedger(ledger)
        }
        return ledger 
    }


    @ProxyMethod
    public def findLedgerbyTdNo( faas ) {
        return em.findLedgerbyTdNo(faas)
    }

    @ProxyMethod
    public def findLedgerbyPrevTdNo( faas ) {
        return em.findLedgerbyPrevTdNo(faas)
    }

    @ProxyMethod
    public def findLedgerByFullPin( faas ) {
        return em.findLedgerByFullPin(faas)
    }

    @ProxyMethod
    public def getRpuTypes(  ) {
        return rpuSvc.getRpuTypes();
    }

    @ProxyMethod
    public void reconcileManualLedger(faas, manualledger){
        //em.updateLedgerFaasId([ledgerid:manualledger.objid, faasid:faas.objid])
        //em.updateOnlineLedgerInfo(manualledger)
        manualledger = openLedger(manualledger)
        def ledgerfaas = createLedgerFaas(manualledger, faas)
        postLedgerFaas(ledgerfaas) 
        updateLedgerFaasInfo(faasSvc.openFaas(faas), manualledger)
        postTaxDifference(manualledger, ledgerfaas, faas)
    }

    def createLedgerInfo(faas){
        faas.rp = rpSvc.open(faas.rp )

        def ledger = [
            objid                   : faas.objid,
            state                   : STATE_PENDING,
            faasid                  : faas.objid,
            basic                   : 0.0,
            basicint                : 0.0,
            basicdisc               : 0.0,
            basiccredit             : 0.0,
            sef                     : 0.0,
            sefint                  : 0.0,
            sefdisc                 : 0.0,
            sefcredit               : 0.0,
            nextbilldate            : null, 
            lastyearpaid            : 0,
            lastqtrpaid             : 0,
            firstqtrpaidontime      : false,
            qtrlypaymentavailed     : false,
            qtrlypaymentpaidontime  : false,
            lastitemyear            : 0,
            idleland                : faas.rpu.idleland,
            faases                  : [],
            barangayid              : faas.rp.barangay.objid,
            taxpayer                : faas.taxpayer,
            owner                   : faas.owner,
            fullpin                 : faas.fullpin,
            tdno                    : faas.tdno,
            cadastrallotno          : faas.rp.cadastrallotno,
            rputype                 : faas.rpu.rputype,
            txntype                 : faas.txntype, 
            classcode               : faas.rpu.classification.code,
            classification          : faas.rpu.classification,
            totalav                 : faas.rpu.totalav, 
            totalmv                 : faas.rpu.totalmv, 
            totalareaha             : faas.rpu.totalareaha, 
            taxable                 : util.toBoolean(faas.rpu.taxable, true), 
            prevtdno                : faas.prevtdno,
            titleno                 : faas.titleno,
        ]

        ledger.faases << createLedgerFaas( ledger, faas )
        def lastfaas = ledger.faases.last() 
        faas.backtaxes?.each{ backtax ->
            backtax.txntype         = faas.txntype 
            backtax.rpu             = faas.rpu 
            backtax.backtaxyrs      = faas.backtaxyrs
            backtax.taxable         = util.toBoolean(backtax.taxable, true)
            def ledgerfaas          = createLedgerFaas(ledger, backtax)
            ledgerfaas.faasid       = backtax.faasid 
            ledgerfaas.assessedvalue = backtax.av 
            ledgerfaas.backtax      = true 
            ledgerfaas.toyear       = (lastfaas.fromqtr == 1 ? lastfaas.fromyear - 1 : lastfaas.fromyear)
            ledgerfaas.toqtr        = (lastfaas.fromqtr == 1 ? 4 : lastfaas.fromqtr - 1)
            ledger.faases << ledgerfaas 
            lastfaas = ledgerfaas
        }
        
        return ledger 
    }

    def createLedgerFaas(ledger, faas){
        return [
            objid                   : faas.objid,
            state                   : ledger.state,
            rptledgerid             : ledger.objid,
            faasid                  : faas.objid, 
            tdno                    : faas.tdno,
            txntype_objid           : faas.txntype.objid,
            classification_objid    : faas.rpu.classification.objid,
            actualuse_objid         : faas.rpu.classification.objid,
            taxable                 : util.toBoolean(faas.rpu.taxable, true),
            backtax                 : (faas.backtaxyrs > 0 ),
            fromyear                : faas.effectivityyear,
            fromqtr                 : faas.effectivityqtr,
            toyear                  : 0,
            idleland                : (faas.rpu.idleland ? 1 : 0),
            toqtr                   : 0,
            assessedvalue           : faas.rpu.totalav,
            systemcreated           : true,
            reclassed               : util.toBoolean(faas.rpu.reclassed, false),
        ]
    }


    @ProxyMethod
    public void validateReconcileSubledger(ledger, currentledger) {
        if (ledger.faasid)
            throw new Exception('Subledger has already been reconciled.')
        if (ledger.state != 'CANCELLED')
            throw new Exception('Subledger is not yet cancelled. Only cancelled subledger can be reconciled.')
        if (currentledger.state == 'CANCELLED')
            throw new Exception('Ledger has already been cancelled.')
        if (currentledger.state != 'APPROVED')
            throw new Exception('Ledger is not yet approved.')

        ledger = openLedger(ledger);

        //check if currentledger is a child of the subledger's parent ledger
        //get current ledger previous faas 
        def prevfaases = em.getPreviousFaas(currentledger)
        if (prevfaases && prevfaas[0].prevfaasid != ledger.subledger.parent.objid)
            throw new Exception("Current ledger is invalid. The previous ledger does not match subledger's parent ledger.")
    }

    @ProxyMethod
    public void reconcileSubledger(subledger, currentledger){
        subledger.putAll( openLedger(subledger) )
        subledger.faasid = currentledger.faasid 
        
        currentledger.putAll(openLedger(currentledger))
        def currentitem = currentledger.faases.first()


        //cutoff toyear and toqtr of subledger 
        def lastitem = subledger.faases.last()
        lastitem.toyear = currentitem.fromqtr == 1 ? currentitem.fromyear - 1 : currentitem.fromyear 
        lastitem.toqtr = currentitem.fromqtr == 1 ? 4 : currentitem.fromqtr - 1 
        subledger.state = STATE_RECONCILED
        updateLedger(subledger)

        //copy subledger.faases to currentledger 
        subledger.faases.each{
            it.objid = 'A' + it.objid 
            it.rptledgerid = currentledger.objid 
            currentledger.faases << it
        }
        currentledger.lastyearpaid = subledger.lastyearpaid
        currentledger.lastqtrpaid = subledger.lastqtrpaid
        currentledger.firstqtrpaidontime = subledger.firstqtrpaidontime
        currentledger.qtrlypaymentavailed = subledger.qtrlypaymentavailed
        currentledger.qtrlypaymentpaidontime = subledger.qtrlypaymentpaidontime
        currentledger.partialbasic = subledger.partialbasic
        currentledger.partialbasicint = subledger.partialbasicint
        currentledger.partialbasicdisc = subledger.partialbasicdisc
        currentledger.partialsef = subledger.partialsef
        currentledger.partialsefint = subledger.partialsefint
        currentledger.partialsefdisc = subledger.partialsefdisc
        updateLedger(currentledger)
    }
}

