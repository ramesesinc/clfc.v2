import com.rameses.annotations.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;


public class RPTBillingRuleAnalyzerService
{
	@Service('RPTBillingService')
	def billingSvc

	@Service('DateService')
	def dtSvc 

	@Service('NumberService')
	def numSvc

	@Service('RPTUtil')
	def util

	@Service('RPTLedgerService')
	def ledgerSvc 


	@ProxyMethod
	public def generateNoLedger( bill ) {
		billingSvc.validateBillParam(bill)
		buildTestLedgerItems(bill)
		bill = billingSvc.calculateBill(bill)
		createTotalItem(bill)
		return bill
	}

	void buildTestLedgerItems(bill){
		if (!bill.rptledger.faases)
			throw new Exception('Ledger Items are required.')
		bill.rptledger.faases.each{it.state = 'APPROVED'}
		bill._firstitem = null 
		bill._pdate 	= dtSvc.parseDate(bill.billdate, null)
		def cy 			= bill._pdate.year 
		bill.items 		= []

		if (!bill.taxpayer){
			bill.taxpayer = bill.rptledger.taxpayer 
		}
		bill.rptledger.fromyear.upto(bill.billtoyear){ yr ->
			createYearlyItemFact(bill, yr)
		}
	}


	void createYearlyItemFact(bill, yr){
		def ledgerfaas = bill.rptledger.faases.find{ yr >= it.fromyear && ( yr <= it.toyear || it.toyear == 0) }
		if (!ledgerfaas){
			def xyr = yr + 1
			ledgerfaas = bill.rptledger.faases.find{ xyr >= it.fromyear && ( xyr <= it.toyear || it.toyear == 0) }
		}
		if (!ledgerfaas) 
			throw new Exception('Ledger FAAS for year ' + yr + ' is not defined.\nVerify RPT Ledger faas history record.')

		def qtrlyav = numSvc.round( ledgerfaas.assessedvalue / 4)
		def av      = ledgerfaas.assessedvalue

		def fromqtr = (yr == bill.rptledger.fromyear ? bill.rptledger.fromqtr : 1 )
		def toqtr = (yr == bill.billtoyear ? bill.billtoqtr : 4)

		if (fromqtr != 1 || toqtr != 4)
			av = qtrlyav * (toqtr - fromqtr + 1)

		bill.items << createLedgerItem(bill, ledgerfaas, yr, 0, fromqtr, toqtr, av)

		//adjust av based on billto qtr 
		bill.items.each{rli ->
			rli.paidqtr = 0
			if (rli.year == bill.billtoyear && rli.paidqtr < 4)
				rli.av = numSvc.round(rli.av / 4) * (bill.billtoqtr - rli.paidqtr )
			else if(rli.year == bill.billtoyear) 	
				rli.av = rli.av - (numSvc.round(rli.av / 4) * 3) 
			else if (rli.paidqtr < 4)
				rli.av = numSvc.round(rli.av / 4) * (4 - rli.paidqtr )  
			else 
				rli.av = rli.av - numSvc.round(rli.av / 4) * 3
		}
	}

	def createLedgerItem(bill, ledgerfaas, yr, qtr, fromqtr, toqtr, av){
		def firstitem = false
		if (bill._firstitem == null){
			firstitem = true
			bill._firstitem = false
		}

		def params = [ledger:bill.rptledger, ledgerfaas:ledgerfaas, yr:yr, av:av]
		ledgerSvc.calcLedgerItemAssessedValue(params)

		return [
	        objid              : 'BI' + new java.rmi.server.UID(),
	        rptledgerid        : bill.rptledger.objid,
	        rptledgerfaasid    : ledgerfaas.objid,
	        _pdate 				: bill._pdate,
	        year               : yr,
	        qtr                : qtr,
	        originalav         : ledgerfaas.assessedvalue,
	        av                 : params.av,
	        txntype            : ledgerfaas.txntype,
	        classification     : ledgerfaas.classification,
	        actualuse          : ledgerfaas.classification,
	        numberofmonthsfromqtr   : billingSvc.calculateNoOfMonthsFromQtr(bill._pdate, yr, qtr),
	        numberofmonthsfromjan   : billingSvc.calculateNoOfMonthsFromJan(bill._pdate, yr, qtr), 
	        backtax                 : util.toBoolean(ledgerfaas.backtax, false),
	        reclassed               : util.toBoolean(ledgerfaas.reclassed, false),
	        firstitem             	: firstitem,
	        assessedvalue			: 0.0,
	        qtrlyav 				: 0.0,
	        idleland 				: (ledgerfaas.idleland == 1),
	        fromqtr 				: fromqtr,
	        toqtr 					: toqtr,
	        basic					: 0.0,
			basicint				: 0.0,
			basicdisc				: 0.0,
			basicidle				: 0.0,
			basicidleint			: 0.0,
			basicidledisc			: 0.0,
			sef						: 0.0,
			sefint					: 0.0,
			sefdisc					: 0.0,
			firecode				: 0.0,
			basicnet				: 0.0,
			sefnet					: 0.0,
			total					: 0.0,
			partialled 				: 0,
			effectiveyear 			: ledgerfaas.fromyear, 
	    ]
	}	

	void createTotalItem(bill){
        def sum = { items, fld ->
            def t = 0.0
            items.each{
                t += ( it[fld] != null ? it[fld] : 0.0 )
            }
            return t
        }
        
        if (bill.items) {
            bill.items << [
                actualuse   : 'TOTALS', 
                basic       : sum(bill.items, 'basic'),
                basicdisc   : sum(bill.items, 'basicdisc'),
                basicint    : sum(bill.items, 'basicint'),
                basicidle     : sum(bill.items, 'basicidle'),
                basicidledisc : sum(bill.items, 'basicidledisc'),
                basicidleint  : sum(bill.items, 'basicidleint'),
                sef         : sum(bill.items, 'sef'),
                sefdisc     : sum(bill.items, 'sefdisc'),
                sefint      : sum(bill.items, 'sefint'),
                firecode    : sum(bill.items, 'firecode'),
                total       : sum(bill.items, 'total'),
            ]
        }
    }	
}